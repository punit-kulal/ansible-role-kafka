---
- name: Check if required variables are defined
  ansible.builtin.assert:
    that:
      - kafka_node_id is defined
      - kafka_node_id | int or kafka_node_id == "0"

- name: Update apt cache
  become: true
  ansible.builtin.apt:
    update_cache: true
    cache_valid_time: 3600
  when: ansible_os_family == "Debian" and kafka_install_dependencies | bool

  # acl package is required to set correct permissions when using become_user
- name: Install acl package
  become: true
  ansible.builtin.package:
    name: acl
    state: present
  when: kafka_install_dependencies | bool and ansible_os_family == "Debian"

- name: Install java
  become: true
  ansible.builtin.package:
    name: "{{ kafka__dependencies }}"
    state: present
  when: kafka_install_dependencies | bool

- name: Ensure Kafka group exists
  become: true
  ansible.builtin.group:
    name: "{{ kafka_user_group }}"
    state: present
    system: true

- name: Ensure Kafka user exists
  become: true
  ansible.builtin.user:
    name: "{{ kafka_user }}"
    state: present
    system: true
    group: "{{ kafka_user_group }}"
    home: "{{ kafka_home }}"
    createhome: false

- name: Download Kafka
  become: true
  ansible.builtin.get_url:
    url: "{{ kafka__download_url }}"
    checksum: "{{ kafka_checksum }}"
    dest: "{{ kafka__download_destination }}"
    mode: "0644"
    timeout: 30
  retries: 3
  delay: 3

- name: Download Prometheus JMX exporter
  become: true
  get_url:
    url: "{{ prometheus_exporter__download_url }}"
    dest: "{{ prometheus_exporter__download_destination }}"
    mode: "0644"
    timeout: 30
  retries: 3
  delay: 3
  
- name: Unpack Kafka
  become: true
  ansible.builtin.unarchive:
    src: "{{ kafka__download_destination }}"
    copy: false
    dest: "{{ kafka_download_directory }}"
    owner: "{{ kafka_user }}"
    group: "{{ kafka_user_group }}"

- name: Configure Kafka symlink
  become: true
  ansible.builtin.file:
    path: "{{ kafka_home }}"
    src: "{{ kafka_download_directory }}/kafka_{{ kafka_scala_version }}-{{ kafka_version }}"
    state: link
    force: true
    follow: false

- name: Create Kafka data and log directories
  become: true
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    owner: "{{ kafka_user }}"
    group: "{{ kafka_user_group }}"
    mode: "0750"
  loop: "{{ kafka_log_dirs + [kafka_log_directory] }}"

- name: Directing Kafka service logs to /var/log
  become: true
  ansible.builtin.file:
    path: "{{ kafka_home }}/logs"
    src: "{{ kafka_log_directory }}"
    state: link

- name: Ensure sysconfig directory exists
  become: true
  ansible.builtin.file:
    path: /etc/sysconfig
    state: directory
    mode: "0755"

- name: Add kafka environment file
  become: true
  ansible.builtin.template:
    src: templates/kafka.env.j2
    dest: /etc/sysconfig/kafka
    mode: "0644"
  notify: Restart Kafka

- name: Create JMX confiugration
  become: true  
  ansible.builtin.template:
    src: templates/jmx_exporter_config.j2
    dest: /etc/sysconfig/jmx_exporter_config.yml
    mode: "0644"

- name: Install Kafka service definition
  become: true
  ansible.builtin.template:
    src: kafka.service.j2
    dest: /usr/lib/systemd/system/kafka.service
    mode: "0644"
  notify: Restart Kafka

- name: Configure Kafka
  become: true
  become_user: "{{ kafka_user }}"
  ansible.builtin.template:
    src: server.properties.j2
    dest: "{{ kafka__config_path }}"
    mode: "0644"
  notify: Restart Kafka

- name: Check if data directory is formatted
  become: true
  become_user: "{{ kafka_user }}"
  ansible.builtin.stat:
    path: "{{ item }}/meta.properties"
  register: kafka__reg_check_if_formatted
  loop: "{{ kafka_log_dirs }}"

- name: Check if cluster uuid lock file exists
  become: true
  become_user: "{{ kafka_user }}"
  ansible.builtin.stat:
    path: "{{ kafka__uuid_file }}"
  register: kafka__reg_check_uuid_file
  when: inventory_hostname in groups["kafka__group_controller_nodes"]
  run_once: true

- name: Create cluster uuid
  become: true
  become_user: "{{ kafka_user }}"
  ansible.builtin.command:
    cmd: "{{ kafka_home }}/bin/kafka-storage.sh random-uuid"
  register: kafka__reg_storage_random_uuid
  changed_when: true
  when: not kafka__reg_check_uuid_file.stat.exists
  run_once: true

- name: Write cluster uuid
  become: true
  become_user: "{{ kafka_user }}"
  ansible.builtin.copy:
    content: "{{ kafka__reg_storage_random_uuid.stdout }}"
    dest: "{{ kafka__uuid_file }}"
    mode: "0444"
  when: not kafka__reg_check_uuid_file.stat.exists and inventory_hostname in groups["kafka__group_controller_nodes"]

- name: Set cluster uuid
  become: true
  become_user: "{{ kafka_user }}"
  ansible.builtin.command:
    cmd: cat {{ kafka__uuid_file }}
  when: inventory_hostname in groups["kafka__group_controller_nodes"]
  register: kafka__reg_cluster_uuid
  changed_when: false
  run_once: true

- name: Format kafka log directory
  become: true
  become_user: "{{ kafka_user }}"
  ansible.builtin.command:
    cmd: >
      {{ kafka_home }}/bin/kafka-storage.sh format
      --config {{ kafka__config_path }}
      --cluster-id {{ kafka__reg_cluster_uuid.stdout }}
  changed_when: true
  when: not kafka__reg_check_if_formatted.results[0].stat.exists

- name: Flush handlers
  ansible.builtin.meta: flush_handlers

- name: Ensure Kafka service is enabled and started
  become: true
  ansible.builtin.systemd:
    name: kafka
    enabled: true
    state: started
    daemon_reload: true
  retries: 3
  delay: 2

- name: Wait for Kafka controllers to start
  ansible.builtin.wait_for:
    port: 9093
    timeout: 30
  when: inventory_hostname in groups["kafka__group_controller_nodes"]

- name: Wait for Kafka brokers to start
  ansible.builtin.wait_for:
    port: 9092
    timeout: 30
  when: inventory_hostname in groups["kafka__group_broker_nodes"]

